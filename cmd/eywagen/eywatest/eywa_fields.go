// generated by eywa. DO NOT EDIT. Any changes will be overwritten.
package eywatest

import (
	"github.com/imperfect-fourth/eywa"
	"bytes"
	"github.com/google/uuid"
)


const testTable_Name eywa.ModelFieldName[testTable] = "name"

func testTable_NameField(val string) eywa.ModelField[testTable] {
	return eywa.ModelField[testTable]{
		Name: "name",
		Value: val,
	}
}
const testTable_Age eywa.ModelFieldName[testTable] = "age"

func testTable_AgeField(val *int) eywa.ModelField[testTable] {
	return eywa.ModelField[testTable]{
		Name: "age",
		Value: val,
	}
}
const testTable_ID eywa.ModelFieldName[testTable] = "id"

func testTable_IDField(val int) eywa.ModelField[testTable] {
	return eywa.ModelField[testTable]{
		Name: "id",
		Value: val,
	}
}
const testTable_custom eywa.ModelFieldName[testTable] = "custom"

func testTable_customField(val *customType) eywa.ModelField[testTable] {
	return eywa.ModelField[testTable]{
		Name: "custom",
		Value: val,
	}
}

func testTable_testTable2(subField eywa.ModelFieldName[testTable2], subFields ...eywa.ModelFieldName[testTable2]) string {
	buf := bytes.NewBuffer([]byte("testTable2 {"))
	buf.WriteString(string(subField))
	for _, f := range subFields {
		buf.WriteString("\n")
		buf.WriteString(string(f))
	}
	buf.WriteString("}")
	return buf.String()
}

const testTable2_ID eywa.ModelFieldName[testTable2] = "id"

func testTable2_IDField(val uuid.UUID) eywa.ModelField[testTable2] {
	return eywa.ModelField[testTable2]{
		Name: "id",
		Value: val,
	}
}
